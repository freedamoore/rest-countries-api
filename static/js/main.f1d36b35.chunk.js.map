{"version":3,"sources":["components/Header.jsx","utilities.js","components/Card.jsx","components/CardList.jsx","components/SearchBox.jsx","components/FilterBox.jsx","components/Wrapper.jsx","components/CountryDetails.jsx","App.js","redux/actions.js","redux/constants.js","serviceWorker.js","redux/reducers.js","index.js"],"names":["Header","toggleDarkMode","className","onClick","document","body","classList","toggle","querySelector","numberWithCommas","x","toString","replace","Card","country","population","region","capital","flag","color","darkMode","style","backgroundColor","src","alt","CardList","countries","map","i","to","alpha3Code","key","textDecoration","name","SearchBox","searchChange","type","placeholder","onChange","FilterBox","filterChange","id","value","Wrapper","props","children","CountryDetails","state","countryDetails","coutnryCode","this","match","params","fetch","then","response","json","setState","arr","getArrayObjectItems","item","nativeName","subregion","topLevelDomain","currencies","languages","borders","Component","App","onRequestCountries","searchField","onSearchChange","filterField","onFilterChange","isPending","filteredCountries","filter","toLowerCase","includes","path","exact","component","href","target","connect","searchCountries","requestCountries","error","dispatch","event","payload","data","catch","Boolean","window","location","hostname","initialStateSearch","initialStateCountries","initialStateDarkMode","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.f1d36b35.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Header.scss';\r\n\r\n\r\n\r\nconst Header = ({toggleDarkMode}) => {\r\n    const changeDOM = () => {\r\n        toggleDarkMode();\r\n        document.body.classList.toggle(\"light-mode\");\r\n        document.querySelector('.header').classList.toggle(\"header__light\");\r\n    };\r\n\r\n    return(\r\n    <div>\r\n        <header className=\"header\">\r\n            <h1 className=\"header__txt\">Where in the World?</h1>\r\n            <button className=\"header__btn\" onClick={changeDOM}>Dark Mode</button>\r\n        </header>\r\n    </div>\r\n)};\r\n\r\nexport default Header;\r\n","\r\n// utility function to format a big number with commas\r\nexport const numberWithCommas = (x) => {\r\n    x = x + \"\"; //to get rid of TypeError: Cannot read property 'toString' of undefined\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}","import React from 'react';\r\nimport { numberWithCommas } from '../utilities.js';\r\nimport './Card.scss';\r\n\r\nconst Card = ({country, population, region, capital, flag, darkMode}) => {\r\n    const color = darkMode? 'var(--color-dark-blue-1)': 'white';\r\n    return (\r\n        <div className=\"card\" style={{backgroundColor: color}}>\r\n            <img className=\"card__img\" src={ flag } alt=\"Country Flag\" />\r\n            <div className=\"card__txt\">\r\n                <h2>{ country }</h2>\r\n                <p>Population: { numberWithCommas(population) }</p>\r\n                <p>Region: { region }</p>\r\n                <p>Capital: { capital }</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './CardList.scss';\r\n\r\nimport Card from './Card';\r\n\r\nconst CardList = ({countries, darkMode}) => (\r\n    <div className=\"CardList\">\r\n    {\r\n        countries.map((country, i) => {\r\n            return (\r\n                <Link to={'/rest-countries-api/' + country.alpha3Code} key={i} style={{ color: 'inherit', textDecoration: 'none' }}>\r\n                    <Card darkMode={darkMode} \r\n                        country={countries[i].name} \r\n                        population={countries[i].population} \r\n                        region={countries[i].region} \r\n                        capital={countries[i].capital} \r\n                        flag={countries[i].flag}\r\n                    />\r\n                </Link>\r\n            );\r\n        })\r\n    }\r\n    </div>\r\n);\r\n\r\n\r\nexport default CardList;","import React from 'react';\r\nimport './SearchBox.scss';\r\n\r\nconst SearchBox = ({ searchChange }) => (\r\n    <input className=\"searchBox\" \r\n        type='search' \r\n        placeholder='Search for a country...'\r\n        onChange={searchChange}\r\n     />\r\n);\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport './FilterBox.scss';\r\nconst FilterBox = ({ filterChange }) => (\r\n    <select className=\"filterBox\" id=\"continents\" name=\"continents\" onChange={ filterChange }>\r\n        <option value=\"\"> Filter by Region </option>\r\n        <option value=\"africa\">Africa</option>\r\n        <option value=\"asia\">Asia</option>\r\n        <option value=\"america\">America</option>\r\n        <option value=\"europe\">Europe</option>\r\n        <option value=\"oceania\">Oceania</option>\r\n    </select>\r\n);\r\n\r\nexport default FilterBox;","import React from 'react';\r\nimport './Wrapper.scss';\r\nconst Wrapper = (props) => {\r\n    return (\r\n        <div className=\"wrapper\">\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Wrapper;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { numberWithCommas } from '../utilities.js';\r\n\r\nimport './CountryDetails.scss';\r\n\r\nclass CountryDetails extends Component{\r\n    constructor(){\r\n        super();\r\n\r\n        this.state={\r\n            countryDetails: {}\r\n        };\r\n    }\r\n    componentDidMount(){\r\n        const coutnryCode = this.props.match.params.country;\r\n        const url = 'https://restcountries.eu/rest/v2/alpha/' + coutnryCode;\r\n        fetch(url)\r\n        .then(response => response.json())\r\n        // .then(country=> console.log(country));\r\n         .then(country => this.setState({countryDetails: country}));\r\n    }\r\n    \r\n    render(){\r\n        const { countryDetails } = this.state;\r\n\r\n        // Some fields return an array of objects. Use this function to retrieve and display them\r\n        const getArrayObjectItems = (arr) =>{\r\n            return (typeof arr !== 'undefined') ? \r\n            arr.map(item => <span>{item.name} </span>) : \r\n            null;\r\n        }\r\n\r\n        const getBorderCountries = (arr) =>{\r\n            return (typeof arr !== 'undefined') ? \r\n            arr.map(item => <span className=\"CountryDetails__border-countries\">{item} </span>) : \r\n            null;\r\n        }\r\n\r\n        return (\r\n            <div className=\"CountryDetails\">\r\n                <Link to={'/rest-countries-api/'} style={{ color: 'inherit', textDecoration: 'none' }}>\r\n                    <button className=\"CountryDetails__btn\">&larr; Back</button>\r\n                </Link>\r\n                <div className=\"CountryDetails__body\">\r\n                    <div className=\"CountryDetails__img-section\">\r\n                        <img className=\"CountryDetails__img\"src={countryDetails.flag} alt=\"flag\"/>\r\n                    </div>\r\n                    <div className=\"CountryDetails__txt-section\">\r\n                        <div>\r\n                            <h1 className=\"CountryDetails__country-heading\">{countryDetails.name}</h1>\r\n                        </div>\r\n                        <div className=\"CountryDetails__facts\">\r\n                            <div className=\"CountryDetails__facts--1\">\r\n                                <p><strong>Native Name:</strong> {countryDetails.nativeName} </p>\r\n                                <p><strong>Population:</strong> {numberWithCommas(countryDetails.population)} </p>\r\n                                <p><strong>Region:</strong> {countryDetails.region}</p>\r\n                                <p><strong>Sub Region:</strong> {countryDetails.subregion}</p>\r\n                                <p><strong>Capital:</strong> {countryDetails.capital}</p>\r\n                            </div>\r\n                            <div className=\"CountryDetails__facts--2\">\r\n                                <p><strong>Top Level Domain:</strong> {countryDetails.topLevelDomain}</p>\r\n                                <p><strong>Currencies:</strong> {getArrayObjectItems(countryDetails.currencies)}</p>\r\n                                <p><strong>Languages:</strong> {getArrayObjectItems(countryDetails.languages)}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"CountryDetails__border\">\r\n                            <div><strong>Border Countries: </strong></div>\r\n                            <div> {getBorderCountries(countryDetails.borders)}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CountryDetails;","import React, { Component } from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\n\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport CardList from './components/CardList';\r\nimport SearchBox from './components/SearchBox';\r\nimport FilterBox from './components/FilterBox';\r\nimport Wrapper from './components/Wrapper';\r\nimport CountryDetails from './components/CountryDetails';\r\n\r\nimport {setSearchField, setFilterField, requestCountries, toggleDarkMode } from './redux/actions';\r\nimport { connect } from 'react-redux';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchCountries.searchField,\r\n    filterField: state.searchCountries.filterField,\r\n    countries: state.requestCountries.countries,\r\n    isPending: state.requestCountries.isPending,\r\n    error: state.requestCountries.error,\r\n    darkMode: state.toggleDarkMode.darkMode\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onFilterChange: (event) => dispatch(setFilterField(event.target.value)),\r\n    onRequestCountries: () => dispatch(requestCountries()),\r\n    toggleDarkMode: () => dispatch(toggleDarkMode())\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n\r\n  componentDidMount(){\r\n    this.props.onRequestCountries();\r\n  }\r\n\r\n  render(){\r\n  \r\n    const { searchField, onSearchChange, filterField, onFilterChange, darkMode, countries, isPending, toggleDarkMode } = this.props;\r\n\r\n    const filteredRegion = countries.filter(country => {\r\n      return country.region.toLowerCase().includes(filterField.toLowerCase());\r\n    });\r\n\r\n    const filteredCountries = filteredRegion.filter(country =>{\r\n      return country.name.toLowerCase().includes(searchField.toLowerCase());\r\n    });\r\n\r\n    // if(!countries.length){\r\n    if (isPending){\r\n      return <h1>Loading...</h1>\r\n    }\r\n    else{  \r\n      return (\r\n        <div className=\"App\">\r\n          <Header toggleDarkMode={toggleDarkMode} />\r\n          <BrowserRouter>\r\n            <Switch>\r\n              <Route path='/rest-countries-api' exact>\r\n                <Wrapper>\r\n                  <SearchBox searchChange = { onSearchChange } />\r\n                  <FilterBox filterChange = { onFilterChange } />\r\n                </Wrapper>\r\n                <CardList countries={filteredCountries} darkMode={darkMode}/>\r\n              </Route>\r\n              <Route path='/rest-countries-api/:country' component={CountryDetails} />            \r\n            </Switch>\r\n          </BrowserRouter>\r\n          <div className=\"attribution\">\r\n            Challenge by <a href=\"https://www.frontendmentor.io?ref=challenge\" target=\"_blank\">Frontend Mentor</a>.\r\n            Coded by <a href=\"https://freedamoore.github.io/\" target=\"_blank\">Freeda Moore</a>.\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    CHANGE_FILTER_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED,\r\n    TOGGLE_DARK_MODE\r\n} from './constants.js'\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n});\r\n\r\nexport const setFilterField = (text) =>({\r\n    type: CHANGE_FILTER_FIELD,\r\n    payload: text\r\n});\r\n\r\nexport const requestCountries = () => (dispatch) => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://restcountries.eu/rest/v2/all')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n    .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}\r\n\r\nexport const toggleDarkMode = () =>({\r\n    type: TOGGLE_DARK_MODE\r\n});","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const CHANGE_FILTER_FIELD = 'CHANGE_FILTER_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\n\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\n\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n\r\nexport const TOGGLE_DARK_MODE = 'TOGGLE_DARK_MODE';","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    CHANGE_FILTER_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED,\r\n    TOGGLE_DARK_MODE\r\n} from './constants.js'\r\n\r\nconst initialStateSearch = {\r\n    searchField: '',\r\n    filterField: ''\r\n}\r\n\r\nexport const searchCountries = (state=initialStateSearch, action={}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        case CHANGE_FILTER_FIELD:\r\n            return Object.assign({}, state, {filterField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateCountries = {\r\n    isPending: false,\r\n    countries: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestCountries = (state=initialStateCountries, action={}) => {\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true });\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { countries: action.payload, isPending: false });\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateDarkMode = {\r\n    darkMode: true\r\n}\r\n\r\nexport const toggleDarkMode = (state=initialStateDarkMode, action={}) =>{\r\n    switch(action.type){\r\n        case TOGGLE_DARK_MODE:\r\n            return Object.assign({}, state, {darkMode: !state.darkMode});\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { searchCountries, requestCountries, toggleDarkMode } from './redux/reducers';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({searchCountries, requestCountries, toggleDarkMode})\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n    \r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}