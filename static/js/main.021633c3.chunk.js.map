{"version":3,"sources":["components/Header.jsx","components/Card.jsx","components/CardList.jsx","components/SearchBox.jsx","components/FilterBox.jsx","components/Wrapper.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","toggleDarkMode","className","onClick","Card","country","population","region","capital","flag","isDarkMode","style","backgroundColor","src","alt","CardList","countries","map","i","key","name","SearchBox","searchChange","type","placeholder","onChange","FilterBox","filterChange","id","value","Wrapper","props","children","App","onSearchChange","event","setState","searchField","target","onFilterChange","console","log","filterField","document","body","classList","toggle","querySelector","darkMode","state","fetch","then","response","json","data","filteredCountries","this","filter","toLowerCase","includes","length","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.021633c3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './Header.scss';\r\n\r\n\r\n\r\nconst Header = ({toggleDarkMode}) => (\r\n    <div>\r\n        <header className=\"header\">\r\n            <h1>Where in the World?</h1>\r\n            <button className=\"header__btn\" onClick={toggleDarkMode}>Dark Mode</button>\r\n        </header>\r\n    </div>\r\n);\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './Card.scss';\r\n\r\nconst Card = ({country, population, region, capital, flag, isDarkMode}) => {\r\n    return (\r\n        <div className=\"card\" style={{backgroundColor: isDarkMode ? 'white': 'var(--color-dark-blue-1)'}}>\r\n            <img className=\"card__img\" src={ flag } alt=\"Country Flag\" />\r\n            <div className=\"card__txt\">\r\n                <h2>{ country }</h2>\r\n                <p>Population: { population }</p>\r\n                <p>Region: { region }</p>\r\n                <p>Capital: { capital }</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport './CardList.scss';\r\n\r\nimport Card from './Card';\r\n\r\nconst CardList = ({countries, isDarkMode}) => (\r\n    <div className=\"CardList\">\r\n    {\r\n        countries.map((country, i) => {\r\n            return (<Card isDarkMode={isDarkMode} \r\n                    key={i}\r\n                    country={countries[i].name} \r\n                    population={countries[i].population} \r\n                    region={countries[i].region} \r\n                    capital={countries[i].capital} \r\n                    flag={countries[i].flag}\r\n                />\r\n            );\r\n        })\r\n    }\r\n    </div>\r\n);\r\n\r\n\r\nexport default CardList;","import React from 'react';\r\nimport './SearchBox.scss';\r\n\r\nconst SearchBox = ({ searchChange }) => (\r\n    <input className=\"searchBox\" \r\n        type='search' \r\n        placeholder='Search for a country...'\r\n        onChange={searchChange}\r\n     />\r\n);\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport './FilterBox.scss';\r\nconst FilterBox = ({ filterChange }) => (\r\n    <select className=\"filterBox\" id=\"continents\" name=\"continents\" onChange={ filterChange }>\r\n        <option value=\"\"> Filter by Region </option>\r\n        <option value=\"africa\">Africa</option>\r\n        <option value=\"asia\">Asia</option>\r\n        <option value=\"america\">America</option>\r\n        <option value=\"europe\">Europe</option>\r\n        <option value=\"oceania\">Oceania</option>\r\n    </select>\r\n);\r\n\r\nexport default FilterBox;","import React from 'react';\r\nimport './Wrapper.scss';\r\nconst Wrapper = (props) => {\r\n    return (\r\n        <div className=\"wrapper\">\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Wrapper;","import React, { Component } from 'react';\n\nimport './App.css';\nimport Header from './components/Header';\nimport CardList from './components/CardList';\nimport SearchBox from './components/SearchBox';\nimport FilterBox from './components/FilterBox';\nimport Scroll from './components/Scroll';\nimport Wrapper from './components/Wrapper';\n\nclass App extends Component {\n\n  constructor(){\n    super();\n\n    this.state = {\n      countries: [],\n      darkMode: false,\n      searchField:'',\n      filterField:''\n    };\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchField: event.target.value });\n  }\n\n  onFilterChange = (event) => {\n    console.log(event.target.value);\n    this.setState({ filterField: event.target.value });\n  }\n\n  toggleDarkMode = () =>{\n    document.body.classList.toggle(\"light-mode\");\n    document.querySelector('.header').classList.toggle(\"header__light\");\n    this.setState({ darkMode: !this.state.darkMode})\n }\n\n  componentDidMount(){\n    fetch('https://restcountries.eu/rest/v2/all')\n    .then(response => response.json())\n    .then(data => this.setState({countries: data}));\n  }\n\n  render(){\n    const filteredRegion = this.state.countries.filter(country => {\n      return country.region.toLowerCase().includes(this.state.filterField.toLowerCase());\n    });\n\n    const filteredCountries = filteredRegion.filter(country =>{\n      return country.name.toLowerCase().includes(this.state.searchField.toLowerCase());\n    });\n\n    if(!this.state.countries.length){\n      return <h1>Loading...</h1>\n    }\n    else{  \n      return (\n        <div className=\"App\">\n          <Header toggleDarkMode={this.toggleDarkMode}/>\n          <Wrapper>\n            <SearchBox searchChange = { this.onSearchChange } />\n            <FilterBox filterChange = { this.onFilterChange } />\n          </Wrapper>\n          {/* <Scroll> */}\n            <CardList countries={filteredCountries} isDarkMode={this.state.darkMode}/>\n          \n          <div className=\"attribution\">\n            Challenge by <a href=\"https://www.frontendmentor.io?ref=challenge\" target=\"_blank\">Frontend Mentor</a>.\n            Coded by <a href=\"https://freedamoore.github.io/\" target=\"_blank\">Freeda Moore</a>.\n          </div>\n          {/* </Scroll> */}\n        </div>\n      );\n    }\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}